# function FGMRES(AT::SparseMatrixCSC,r0::Vector,x0::Vector,inner::Int64,prec::Function,TOL::Float64,
                 # verbose::Bool,flexible::Bool,numCores::Int64, mem::FGMRESmem =  getEmptyFGMRESmem())
# return FGMRES(getAfun(AT,zeros(eltype(r0),size(r0)),numCores),r0,x0,inner,prec,TOL,verbose,flexible,numCores,mem);
# end


# function FGMRES(Afun::Function,r0::Vector,x0::Vector,inner::Int64,prec::Function,TOL::Float64,
                 # verbose::Bool,flexible::Bool,numCores::Int64, mem::FGMRESmem = getEmptyFGMRESmem())
# n = length(r0);
# if isempty(mem)
	# # warn("Allocating memory in GMRES")
	# mem = getFGMRESmem(n,flexible,eltype(r0),inner);
# else
    # resetMem(mem);
	# if size(mem.V,2)!= inner
		# error("FGMRES: size of Krylov subspace is different than inner");
	# end
# end

# betta = norm(r0);
# rnorm0 = betta;

# TYPE = eltype(r0);

# H = zeros(TYPE,inner+1,inner);
# xi = zeros(TYPE,inner+1);
# t = zeros(TYPE,inner);
# y = copy(t);
# xi[1] = betta;

# constOne = one(TYPE);
# constZero = zero(TYPE);

# Z = mem.Z;
# V = mem.V;

# BLAS.scal!(n,(1/betta)*constOne,r0,1); # w = w./betta

# rnorms = zeros(inner);
# w = 0;
# for j = 1:inner
	# if j==1
		# V[:,j] = r0;  # no memory problem with this line....
		# z = prec(r0)
	# else
		# V[:,j] = w;  # no memory problem with this line....
		# z = prec(w)
	# end
	
	# if flexible
		# Z[:,j] = z; # no memory problem with this line....
	# end
	# w = Afun(z);
    # # Gram Schmidt:
	# BLAS.gemv!('C', constOne, V, w,constZero,t);# t = V'*w;
	# H[1:inner,j] = t;
	# BLAS.gemv!('N', -constOne, V, t,constOne,w); # w = w - V*t  
		
	# ## modified Gram Schmidt:
    # # for i=1:j
        # # H[i,j] = dot(vec(V[:,i]),w);
        # # w = w - H[i,j]*vec(V[:,i]);
    # # end
	
	
    # betta = norm(w);
    # H[j+1,j] = betta;
    
	# BLAS.scal!(n,(1/betta)*constOne,w,1); # w = w*(1/betta);

	# # the following 2 lines are equivalent to the 2 next 
    # # y = H[1:j+1,1:j]\xi[1:j+1];
    # # y = norm(H[1:j+1,1:j]*y - xi[1:j+1])
    # Q = qr(H[1:j+1,1:j],thin=false)[1];
	# rnorms[j] = abs(Q[1,end]*xi[1]);
    # if verbose
		# if j==1
			# resprev = rnorm0;
		# else
			# resprev = rnorms[j-1];
		# end
        # # println(string("Inner iter ",j,": FGMRES: residual norm: ",rnorms[j],", relres: ",rnorms[j]/rnorm0,", factor: ",rnorms[j]/resprev));
	# end
    # if rnorms[j] < TOL
        # rnorms = rnorms[1:j];
        # break;
    # end
# end
# y[:] = pinv(H)*xi;
# # norm(H*y - xi)
# if flexible
	# BLAS.gemv!('N', constOne, Z, y,constZero,w); # w = Z*y  #This is the correction that corresponds to the residual. 
# else
	# BLAS.gemv!('N', constOne, V, y, constZero, w);
	# z = prec(w);
	# w = z;
# end
# addVectors(constOne,w,x0);

# return x0,rnorms; # w is the correction vector;
# end
